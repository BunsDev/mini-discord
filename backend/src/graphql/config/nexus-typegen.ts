/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Category: { // root type
    _id: string; // String!
    channels: NexusGenRootTypes['Channels'][]; // [Channels!]!
    name: string; // String!
  }
  Channels: { // root type
    _id: string; // String!
    name: string; // String!
    typo: string; // String!
  }
  Mutation: {};
  Query: {};
  Server: { // root type
    _id: string; // String!
    admin: string; // String!
    category: NexusGenRootTypes['Category'][]; // [Category!]!
    channels: NexusGenRootTypes['Channels'][]; // [Channels!]!
    createdAt: string; // String!
    gif?: string | null; // String
    icon?: string | null; // String
    name: string; // String!
  }
  User: { // root type
    _id: string; // String!
    createdAt: string; // String!
    online: boolean; // Boolean!
    password: string; // String!
    profileUrl?: string | null; // String
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Category: { // field return type
    _id: string; // String!
    channels: NexusGenRootTypes['Channels'][]; // [Channels!]!
    name: string; // String!
  }
  Channels: { // field return type
    _id: string; // String!
    name: string; // String!
    typo: string; // String!
  }
  Mutation: { // field return type
    addChannel: NexusGenRootTypes['Server']; // Server!
    addServer: NexusGenRootTypes['Server']; // Server!
    delServer: boolean; // Boolean!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  Server: { // field return type
    _id: string; // String!
    admin: string; // String!
    category: NexusGenRootTypes['Category'][]; // [Category!]!
    channels: NexusGenRootTypes['Channels'][]; // [Channels!]!
    createdAt: string; // String!
    gif: string | null; // String
    icon: string | null; // String
    members: NexusGenRootTypes['User'][]; // [User!]!
    name: string; // String!
  }
  User: { // field return type
    _id: string; // String!
    createdAt: string; // String!
    online: boolean; // Boolean!
    password: string; // String!
    profileUrl: string | null; // String
    servers: NexusGenRootTypes['Server'][]; // [Server!]!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Category: { // field return type name
    _id: 'String'
    channels: 'Channels'
    name: 'String'
  }
  Channels: { // field return type name
    _id: 'String'
    name: 'String'
    typo: 'String'
  }
  Mutation: { // field return type name
    addChannel: 'Server'
    addServer: 'Server'
    delServer: 'Boolean'
    login: 'AuthPayload'
    signup: 'AuthPayload'
  }
  Query: { // field return type name
    ok: 'Boolean'
  }
  Server: { // field return type name
    _id: 'String'
    admin: 'String'
    category: 'Category'
    channels: 'Channels'
    createdAt: 'String'
    gif: 'String'
    icon: 'String'
    members: 'User'
    name: 'String'
  }
  User: { // field return type name
    _id: 'String'
    createdAt: 'String'
    online: 'Boolean'
    password: 'String'
    profileUrl: 'String'
    servers: 'Server'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addChannel: { // args
      categoryId?: string | null; // String
      name: string; // String!
      serverId: string; // String!
      typo: string; // String!
    }
    addServer: { // args
      gif?: string | null; // String
      icon?: string | null; // String
      name: string; // String!
    }
    delServer: { // args
      serverId: string; // String!
    }
    login: { // args
      password: string; // String!
      username: string; // String!
    }
    signup: { // args
      password: string; // String!
      profileUrl?: string | null; // String
      username: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}